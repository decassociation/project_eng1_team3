@startuml
'https://plantuml.com/class-diagram

package "food"{

Ingredient "1" -- "1" Status
Ingredient "*" -- "*" Recipe
Ingredient "*" -- "1" Menu

+class Ingredient extends Entity{
+int slices
-int idealSlices
+float cookedTime
-float idealCookedTime
+Status status
+boolean cooking
+boolean slicing
+boolean flipped
+String name
-{static} ShapeRenderer _shapeRenderer
-BitmapFont font
~BitmapFont flipText
+Ingredient(pos:Vector2, width:float, height:float, name:String, idealSlices:int, idealCookedTime:float)
+Ingredient(ingredient:Ingredient)
+boolean flip()
+boolean slice(batch:SpriteBatch, dT:float)
+double cook(dT:float, batch:SpriteBatch)
+void drawStatusBar(percentage:float, optimumLower:float, optimumUpper:float)
+boolean equals(o:Object)
}

enum Status{
RAW
COOKED
BURNED
}

+class Ingredients{
+{static} Ingredient unformedPatty
+{static} Ingredient formedPatty
+{static} Ingredient cookedPatty
+{static} Ingredient burnedPatty
+{static} Ingredient lettuce
+{static} Ingredient tomato
+{static} Ingredient onion
+{static} Ingredient lettuceChopped
+{static} Ingredient tomatoChopped
+{static} Ingredient onionChopped
+{static} Ingredient tomatoPaste
+{static} Ingredient bun
+{static} Ingredient cooked_bun
+{static} Ingredient potato
+{static} Ingredient cooked_potato
+{static} Ingredient beans
+{static} Ingredient cooked_beans
+{static} Ingredient cooked_beans_with_spill
+{static} Ingredient cheese
+{static} Ingredient dough
+{static} Ingredient pizzaBase
+{static} Ingredient cookedPizzaBase
}

+class Menu{
-{static} final Map<Ingredient, String> BURGER_STEPS
-{static} final Map<Ingredient, String>  BURGER_BURNED_STEPS
-{static} final Map<Ingredient, String> SALAD_STEPS
-{static} final Map<Ingredient, String> POTATO_BEANS_STEPS
-{static} final Map<Ingredient, String> PIZZA_STEPS
+{static} final Map<String, Recipe> RECIPES
+{static} final Map<Ingredient, Ingredient> INGREDIENT_PREP
}

+class Recipe extends Ingredient{
+final String name
+Map<Ingredient, String> ingredientInstructions
-boolean shouldBeOrdered
-String initialSteps
-String finalSteps
-Ingredient initialIngredient
+float cost
-BitmapFont font
-{static} ShapeRenderer _shapeRenderer
+Recipe(initialSteps:String, initialIngredient:Ingredient,ingredientInstructions:Map<Ingredient, String>,
 			finalSteps:String, name:String, shouldBeOrdered:boolean, pos:Vector2, width:float, height:float,
 			cost:float)
+void displayRecipe(batch:SpriteBatch, pos:Vector2)
+boolean matches(givenIngredients:Stack<Ingredient>)
-boolean contains(checkIngredient:Ingredient, ingredients:ArrayList<Ingredient>)
}

}

package "entity"{

CustomerController "1" -- "*" Customer

+class Cook extends Entity{
-{static} int MAX_STACK_SIZE
-{static} int FRAME_COLS
-{static} int FRAME_ROWS
-Vector2 direction
-int cookno
-Texture walkSheet
-Animation<TextureRegion> walkAnimation
-TextureRegion[][] spriteSheet
-TextureRegion[][] currentFrame
-TextureRegion[] walkFrames
-float stateTime
+boolean locked
+boolean holding
+Stack<Ingredient> heldItems
+Cook(pos:Vector2, cooknum:int)
+void update(control:Control, dt:float, cl:CollisionTile[][])
+void pickUpItem(item:Ingredient)
+void dropItem()
+boolean full()
+void draw_bot(batch:SpriteBatch)
+void draw_top(batch:SpriteBatch)
+void draw_top(batch:SpriteBatch, position:Vector2)
-void setWalkTexture(path:String)
-void setWalkFrames(row:int)
+Boolean checkCollision(cookx:float, cooky:float, cltiles:CollisionTile[][])
+Rectangle getCollideBoxAtPosition(x:float, y:float)
}

+class Customer{
~int targetsquare
+int posx
+int posy
~Texture textf
~Texture textb
~Texture textr
~Texture textl
~TextureRegion[][] custpartsf
~TextureRegion[][] custpartsb
~TextureRegion[][] custpartsr
~TextureRegion[][] custpartsl
~TextureRegion[][] currentcustparts
~int startposx
~int targetpixel
+boolean locked
+boolean readyfordeletion
-long arrivalTime
+String order
-int custNumber
+Customer(x:int, y:int, tg:int, custno:int)
+void arrived()
+long waitTime()
+void renderCustomersTop(b:Batch)
+void renderCustomersBot(b:Batch)
+void setTargetsquare(tg:int)
+void stepTarget()
+void setFront()
+void setBack()
}

+class CustomerController{
~int lockout
+int amountActiveCustomers
~ArrayList<ArrayList<Integer>> customerCells
+Customer[] amountActiveCustomers
~Customer[] leavingCustomers
~TiledMap gameMap
~int top
~int bottom
~int xCoordinate
-long timeOfLastCustomer
-int timeUntilNext
-int spawnMultiple
+int totalServed
-String difficulty
-HashMap<String, Float> difficultyMultipliers
-void computerCustomerZone(gameMap: TiledMap)
+Customer spawnCustomer()
+void delCustomer(num:int)
+void delCustomer(customer:Customer)
+void drawCustTop(b1:Batch)
+void updateCustomers()
+Customer isCustomerAtPos(pos:Vector2)
}

+class Entity{
+Vector2 pos
+Texture texture
+float width
+float height
+float speed
~float dirX
~float dirY
+void draw(batch:SpriteBatch)
}

}
@enduml
