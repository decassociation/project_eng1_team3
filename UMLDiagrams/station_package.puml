@startuml
'https://plantuml.com/class-diagram

package "station"{

StationManager "1" -- "*" Station

+class BakingStation extends CookingStation{
-{static} final Ingredient[] ALLOWED_INGREDIENTS
+BakingStation(pos:Vector2)
+boolean place(ingredient:Ingredient)
}

+class CookingStation extends Station{
~ParticleEffect[] pES
+CookingStation(pos:Vector2, numberOfSlots:int, allowedIngredients:Ingredient[],
 particlePath:String, soundPath, String)
#void createParticleEmitter(pos:Vector2, particlePath, String)
+void drawParticles(batch:SpriteBatch, slotIndex:int)
+boolean lockCook()
+void checkCookingStation(batch:SpriteBatch)
}

+class CuttingStation extends Station{
-{static} final Ingredient[] ALLOWED_INGREDIENTS
+float currentCutTime
+CuttingStation(pos:Vector2, timeBetweenCuts:float)
+void boolean lockCook()
}

+class FryingStation extends CookingStation{
-{static} final Ingredient[] ALLOWED_INGREDIENTS
+FryingStation(pos:Vector2)
+boolean place(ingredient:Ingredient)
}

+class IngredientStation extends Station{
+IngredientStation(pos:Vector2, ingredient:Ingredient)
}

+class PrepStation extends Station{
+float progress
-{static} ShapeRenderer shapeRenderer
+PrepStation(pos:Vector2)
+boolean slotsToRecipe()
+boolean lockCook()
-{static} ShapeRenderer getShapeRenderer()
+void updateProgress(batch:SpriteBatch, delta:float)
-void drawStatusBar(batch:SpriteBatch)
-Ingredient ingredientMatch(toMatch:Ingredient)
}

+class ServingStation extends Station{
~String[] possibleOrders
~{static} Ingredient[] allowedIngredients
+ServingStation(pos:Vector2)
+void serveCustomer()
}

+class Station{
-Music interactSound
+Ingredient[] allowedIngredients
+Vector2 pos
+Stack<Ingredient> slots
+boolean infinite
#int numberOfSlots
+Cook lockedCook
-BitmmapFont font
+boolean active
+Station(pos:Vector2, numberOfSlots:int, infinite:boolean,
 Ingredient[] allowedIngredients, soundPath:String)
+boolean place(ingredient:Ingredient)
+boolean isAllowed(droppedIngredient:Ingredient)
+Ingredient take()
+void drawTakeText(batch:SpriteBatch)
+void drawDropText(batch:SpriteBatch)
+void drawText(batch:SpriteBatch, text:String, pos:Vector2)
+void interactSound()
}

+class StationManager{
+{static} Map<Vector2, Station> stations
~SpriteBatch batch
-BitmmapFont font
+StationManager()
+void handleStation(batch:SpriteBatch)
+void checkInteractedTile(type:String, pos:Vector2)
-boolean checkStationExists(pos:Vector2, station:Station)
-void placeIngredientStation(pos:Vector2)
-void takeIngredientStation(pos:Vector2, ingredient:Ingredient)
}

}

@enduml