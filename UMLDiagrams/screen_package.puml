@startuml
'https://plantuml.com/class-diagram

package "screen"{

GameScreen "1" -- "1" MainScreen
GameScreen "1" -- "1" WaveSelectScreen
GameScreen "1" -- "1" CreditScreen
GameScreen "1" -- "1" DifficultySelectScreen
GameScreen "1" -- "1" Leaderboard
GameScreen "1" -- "1" Tutorial

Tutorial *-- PosTextPair

+class CreditScreen implements Screen{
+SpriteBatch batch
+Texture creditsImg
+MainGameClass mainGameClass
+MainScreen mainScreen
+CreditScreen(mainGameClass:MainGameClass)
+void show()
+void render(delta:float)
+void resize(width:int, height:int)
+void pause()
+void resume()
+void hide()
+void dispose()
}

+class DifficultySelectScreen implements Screen{
~final MainGameClass game
~final MainScreen ms
-String difficulty
-int waves
~float buttonwidth
~float buttonheight
~button easy
~button normal
~button hard
~button back
~button go
~Texture easyTexture
~Texture normalTexture
~Texture hardTexture
~Texture backTexture
~Texture goTexture
~STATE state
~Stage stage
~OrthographicCamera camera
~Viewport viewport
~Texture background
~BitmapFont font
+DifficultySelectScreen(class:MainGameClass, ms:MainScreen, waves:int)
+void changeScreen(state:STATE)
+void show()
+void render(delta:float)
+void resize(width:int, height:int)
+enum STATE.none
+enum STATE.back
+enum STATE.new_game
}

+class Leaderboard implements Screen, TextInputListener{
~final MainGameClass game
~Texture background
~Texture line
~Texture leaderboard
~OrthographicCamera camera
~FitViewport viewport
~MainScreen ms
~ArrayList<ArrayList<String>> playerData
+Leaderboard(game:MainGameClass, ms:MainScreen)
+void readPlayerData()
+void sortPlayerData()
+void show()
+void render(delta:float)
+void addLeaderBoardData(name:String, score:int)
+void changeScreenToMain()
+void resize(width:int, height:int)
}

+class MainScreen implements Screen{
~final MainGameClass game
~float v
~float s
~int gameResolutionX
~int gameResolutionY
~float buttonwidth
~float buttonheight
~float xSliderMin
~float xSliderMax
~sliderWidth
~Button sb
~Button lb
~Button ad
~Button eg
~Button end
~Button load
~Button web
~Button cred
~Rectangle volSlide
~Rectangle volSlideBackgr
~Rectangle musSlide
~Rectangle musSlideBackgr
~OrthographicCamera camera
~Viewport viewport
~Texture vButton
~Texture vControl
~Texture background
~Texture startButton
~Texture leaderBoard
~Texture exitGame
~Texture audio
~Texture audioEdit
~Texture endlessGame
~Texture loadGame
~Texture website
~Texture credits
~Stage stage
~enum STATE.main, STATE.audio,
STATE.leaderboard, STATE.new_game,
STATE.endless_game, STATE.credits,
STATE.testing
~STATE state
+MainScreen(final game: MainGameClass)
+void changeScreen(state:STATE)
+void musicVolumeUpdate()
+void gameVolumeUpdate()
+void resize(width:int, height:int)
}

+class GameScreen implements Screen{
+{static} int NUMBER_OF_WAVES
+{static} boolean ENDLESS
~final MainGameClass game
~final MainScreen ms
+{static} int currentWave
+{static} int reputationPoints
~Rectangle volSlideBackgr
~Rectangle volSlide
~Rectangle musSlideBackgr
~Rectangle musSlide
~Rectangle audioBackground
~Rectangle optionsBackground
~Texture ESC
~Texture MENU
~Texture BACKTOMAINSCREEN
~Texture RESUME
~Texture AUDIO
~Texture audioEdit
~Texture vControl
~Texture vButton
~Texture SHOP
~Texture BUYCHEF2
~Texture BUYCHEF3
~Texture BUYBAKINGSTATION
~Texture BUYCUTTINGSTATION
~Texture REDX
~Button mn
~Button rs
~Button rs2
~Button ad
~Button btms
~Button end
~Button shop
~Button buyChef2
~Button buyChef3
~Button buyBakingStation
~Button buyCuttingStation
+{static} CollisionTile[][] CLTiles
~Viewport uiViewport
~Viewport worldViewport
~Stage stage
~Stage stage2
~Stage stage3
~OrthographicCamera uiCamera
+{static} OrthographicCamera worldCamera
+{static} Customer currentWaitingCustomer
+{static} STATE state1
~float v
~float s
~int gameResolutionX
~int gameResolutionY
~float buttonidth
~float buttonheight
~float xSliderMax
~float xSliderMin
~float sliderWidth
~float shopX
~float audioBackgroundWith
~float audioBackgroundHeight
~float audioBackgroundx
~float audioBackgroundy
~long startTime
~long timeOnStartup
~long tempTime
~long tempThenTime
+{static} Control Control
~TiledMapRenderer tiledMapRenderer
+TiledMap map1
+{static} Cook[] cooks
+{static} int currentCookIndex
+{static} Cook cook
+{static} CustomerController cc
~InputMultiplexer multi
~StationManager stationManager
~String difficulty
~PowerupController
~{static} ShapeRenderer _selectedPlayerBox
+{static} final float MAX_WAIT_TIME
~long nowTime
~long thenTime
+enum STATE.Pause
+enum STATE.Continue
+enum STATE.main
+enum STATE.audio
+enum STATE.shop
+void addReputationPoints(i:int)
+GameScreen(game:MainGameClass, ms:MainScreen, difficulty:String, num_waves:int)
+GameScreen(game:MainGameClass, ms:MainScreen, difficulty:String)
-void setShopButtonPositions()
+void show()
-{static} ShapeRenderer getSelectedPlayerBox()
+void render(delta:float)
+{static} void checkCookSwitch()
-void checkCustomerWaitTime(
-void drawUI()
-void setCameraLerp(delta:float)
-void drawHeldItems()
+void changeScreen(state1:STATE)
+void checkState()
+void musicVolumeUpdate()
+void gameVolumeUpdate()
-void calculateBoxMaths()
-void constructCollisionData(mp:TiledMap)
+void checkInteraction(ck:Cook, sr:ShapeRenderer)
+void checkGameOver()
+void resetStatic()
+int getReputationPoints()
+int getStationManager()
+void loadStations()
+void resize(width:int, height:int)
}

+class miniWorldTest implements Screen{
~final game MainGameClass
+{static} int NUMBER_OF_WAVES
+{static} boolean ENDLESS
+Texture background
+{static} int currentWave
+{static} reputationPoints
~Texture ESC
~Texture MENU
~Button mn
+{static} CollisionTile[][] CLTiles
~Viewport uiViewport
~Viewport worldViewport
~Stage stage
~Stage stage2
~boolean flagTop
~boolean flagBot
~OrthographicCamera uiCamera
+{static} OrthographicCamera worldCamera
+{static} Customer currentWaitingCustomer
+enum STATE.Pause
+enum STATE.Continue
+enum STATE.main
+enum STATE.audio
+{static} GameScreen.STATE state1
~float v
~float s
~int gameResolutionX
~int gameResolutionY
~float buttonwidth
~float buttonheight
~long startTime
~long timeOnStartup
~long tempTime
~long tempThenTime
+{static} Control control
~TiledMapRenderer tiledMapRenderer
+TiledMap map1
+{static} Cook[] cooks
+{static} int currentCookIndex
+{static} Cook cook
+{static} CustomerController cc
~StationManager stationManager
~Customer testCustomer
~Customer testCustomer2
~Ingredient testIng
~IngredientStation testIS
~boolean showIngs
+miniWorldTest(game:MainGameClass)
+void custDrawTesting()
+void cookDrawTesting()
+void testCookHolding()
-void drawHeldItems()
+void resize(width:int, height:int)
}

+class Tutorial{
-{static} List<PosTextPair> stages
+{static} boolean complete
+{static} int stage
-{static} ShapeRenderer shapeRenderer
-{static} ShapeRenderer getShapeRenderer()
-{static} final BitmapFont bitmapFont
-{static} GlyphLayout layout
-{static} float nextCharTimer
-{static} String curText
+{static} void drawBox(batch:SpriteBatch, dT:float)
+{static} Vector2 getStagePos()
+{static} void nextStage()
+{static} void previousStage()
~{static} float delay
-{static} boolean addDelay(amount:float, dT:float)
}

class PosTextPair{
+Vector2 pos
+String text
+PosTextPair(pos:Vector2, text:String)
}

+class WaveSelectScreen implements Screen{
~final MainGameClass game
~final MainScreen ms
-int waves
~float buttonwidth
~float buttonheight
~Button incrementWaves
~Button decrementWaves
~Button returnToMain
~Button go
~Texture incrementTexture
~Texture decrementTexture
~Texture returnToMainTexture
~Texture goTexture
~enum STATE.none
~enum STATE.main
~enum STATE.new_game
~STATE state
~Stage stage
~OrthographicCamera camera
~Viewport viewport
~Texture background
~BitmapFont font
+WaveSelectScreen(game:MainGameClass, ms:MainScreen
+void changeScreen(state:STATE)
+void resize(width:int, height:int)

}

}

@enduml